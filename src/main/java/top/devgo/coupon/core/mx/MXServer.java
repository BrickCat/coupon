package top.devgo.coupon.core.mx;

import com.sun.jdmk.comm.*;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;

import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.remote.JMXAuthenticator;
import javax.management.remote.JMXConnectorServer;
import javax.management.remote.JMXConnectorServerFactory;
import javax.management.remote.JMXServiceURL;
import javax.security.auth.Subject;
import java.lang.management.ManagementFactory;
import java.rmi.registry.LocateRegistry;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by dd on 16/12/27.
 */
public class MXServer {
    static MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();

    public static void registerMBean(Object object, ObjectName name) throws Exception {
        mBeanServer.registerMBean(object, name);
    }

    public static void start(int rmiPort, int htmlPort, String serverName) throws Exception {
        new HtmlPageEnhancer().hijack();

        HtmlAdaptorServer adapter = new HtmlAdaptorServer();
        adapter.addUserAuthenticationInfo(new AuthInfo("admin", "1123"));
        adapter.setPort(htmlPort);
        ObjectName parser = new ObjectName(serverName + ":name=htmlAdapter.JMXHtmlParser");
        mBeanServer.registerMBean(new JMXHtmlParser(), parser);//parser要先于adapter注册
        mBeanServer.registerMBean(adapter, new ObjectName(serverName + ":name=htmlAdapter"));
        adapter.setParser(parser);
        adapter.start();


        //这个步骤很重要，注册一个端口，绑定url后用于客户端通过rmi方式连接JMXConnectorServer
        LocateRegistry.createRegistry(rmiPort);
        //URL路径的结尾可以随意指定，但如果需要用Jconsole来进行连接，则必须使用jmxrmi
//      String serviceUrl = "service:jmx:rmi:///jndi/rmi://localhost:" + rmiPort + "/" + serverName;//这种写法jconsole连不上
        String serviceUrl = "service:jmx:rmi:///jndi/rmi://localhost:" + rmiPort + "/jmxrmi";
        JMXServiceURL url = new JMXServiceURL(serviceUrl);
        Map<String, Object> prop = new HashMap<String, Object>();
        prop.put(JMXConnectorServer.AUTHENTICATOR, new JMXAuthenticator() {
            @Override
            public Subject authenticate(Object credentials) {
                if (credentials instanceof String[]){
                    String[] credentialStrs = (String[]) credentials;
                    if (credentialStrs!=null && credentialStrs.length==2){
                        String name = credentialStrs[0];
                        String pwd = credentialStrs[1];
                        if ("admin".equals(name) && "1123".equals(pwd))
                            return new Subject();
                    }
                }
                throw new SecurityException("jmx auth failed");
            }
        });
        JMXConnectorServer jmxConnServer = JMXConnectorServerFactory.newJMXConnectorServer(url, prop, mBeanServer);
        jmxConnServer.start();

        System.out.println("JMXServer start!");
    }

    /**
     * 增强jdmk默认的HtmlPage的decodeUrl方法
     *
     * HtmlAdaptorServer.doProcess->HtmlRequestHandler.processGetRequest->HtmlInvokePage.buildPage
     * ->HtmlInvokePage.getParams->HtmlPage.decodeUrl
     */
    static class HtmlPageEnhancer {

        public void hijack() {
            ClassPool pool = ClassPool.getDefault();
            try {
                CtClass htmlPageCls = pool.get("com.sun.jdmk.comm.HtmlPage");
                CtMethod decodeUrlMtd = htmlPageCls.getDeclaredMethod("decodeUrl");
                decodeUrlMtd.insertBefore("{ return java.net.URLDecoder.decode($1, \"utf-8\"); }");
                htmlPageCls.toClass();
                System.out.println("HtmlPageEnhancer.hijack....ok....");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    static class JMXHtmlParser implements JMXHtmlParserMBean {

        @Override
        public String parseRequest(String request) {
            return null;// null to generate the deafult HTML page.
        }

        @Override
        public String parsePage(String initialPage) {//The HTML page generated by the HTML protocol adaptor.
            if (initialPage!=null){
                initialPage = initialPage.replace("<HEAD>","<HEAD>\n<meta charset=\"utf-8\">");
            }
            return initialPage;
        }
    }

    public interface JMXHtmlParserMBean extends HtmlParser{

    }
}
